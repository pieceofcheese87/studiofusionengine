<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>select = 0;

xMargin = 120;
yStep = 40;

settingButton = false;
showResetPrompt = false;

//Add two for the "Controller index" and "Reset controls" lines
numberOfButtons = KEY.NUMBER + 2;
buttonName = scrControls("getControllerNameArray");

event_user(0);
buttonName[numberOfButtons - 1] = "Reset Controls";
bindName[numberOfButtons - 1] = "";

if (bindName[0] == "-1") bindName[0] = "Disabled";

animationTime = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop reset prompt
showResetPrompt = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!settingButton)
{
    //Not currently rebinding a key, navigate options
    if (scrButtonCheckPressed(KEY.MENU_BACK))
    {
        //Save changes and go back
        scrSaveConfig();
        instance_create(x, y, objOptionsMenu);
        instance_destroy();
    }
    
    if (scrButtonCheckPressed(KEY.MENU_OPTIONS))
    {
        //Save changes and go back
        scrSaveConfig();
        global.menuSelectPrev[1] = 0;
        if (!global.gameStarted)
        {
            room_goto(rMenu);
        }
        else
        {
            instance_destroy();
        }
        exit;
    }
    
    var vInputPressed = scrButtonCheckPressed(KEY.MENU_DOWN) - scrButtonCheckPressed(KEY.MENU_UP);
    if (vInputPressed != 0)
    {
        //Move to next/previous option
        audio_play_sound(global.menuSound, 0, false);
        select += vInputPressed;
        select = scrWrapInRange(select, 0, numberOfButtons - 1);
    }
    
    if (scrButtonCheckPressed(KEY.MENU_ACCEPT))
    {
        if (select != 0)
        {
            //Select current option
            if (select != numberOfButtons - 1)
            {
                //Start rebinding
                settingButton = true;
            }
            else
            {
                //Reset controls
                scrControls("setControllerDefault");
                
                showResetPrompt = true;
                alarm[0] = 60;
            }
        }
    }
    
    var hInputPressed = scrButtonCheckPressed(KEY.MENU_RIGHT) - scrButtonCheckPressed(KEY.MENU_LEFT);
    if (hInputPressed != 0 &amp;&amp; select = 0)
    {   
        //Change controller index
        global.controllerIndex += hInputPressed;
        global.controllerIndex = scrWrapInRange(global.controllerIndex, -1, 11);
    }
}
else
{
    //Wait for new bind
    var newButton = scrAnyControllerButton();
    if (newButton != -1)
    {                                          
        //Bind new key
        global.controls[select, 1] = newButton;
        settingButton = false;
    }
    else if (keyboard_check_pressed(vk_anykey))
    {
        settingButton = false;
    }
}

//Get current controls
event_user(0);

if (bindName[0] == "-1") bindName[0] = "Disabled";

animationTime++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update current binds

bindName[0] = string(global.controllerIndex);
for (var i = 0; i &lt; numberOfButtons - 2; i++)
{
    bindName[i+1] = scrGetControllerBind(global.controls[i, 1]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(scrTernary(!global.gameStarted, c_black, c_white));
draw_set_valign(fa_top);
draw_set_font(fDefault24);

yStart = (608 - numberOfButtons * yStep)/2;
currentSlot = 0;

for(var i = 0; i &lt; numberOfButtons; i += 1)
{
    var bindText = bindName[i];
    if (i == select &amp;&amp; settingButton)
    {
        bindText = "Press button to set";
    }
    else if (showResetPrompt &amp;&amp; i == numberOfButtons - 1)
    {
        bindText = "Controls reset!";
    }
    scrDrawOption(buttonName[i], bindText);
    
    draw_sprite(sprPlayerIdle, animationTime/5, xMargin - 16, yStart + (yStep * select) + 21);
}

if (global.controllerIndex != -1)
{
    //Display currently connected controller
    draw_set_color(c_maroon);
    draw_set_font(fDefault12);
    draw_set_halign(fa_middle);
    draw_set_valign(fa_middle);
    
    var controllerText = "Current controller: ";
    
    if (gamepad_is_connected(global.controllerIndex))
    { 
        controllerText += gamepad_get_description(global.controllerIndex);
    }
    else
    {
        controllerText += "None";
    }
    
    scrDrawTextOutline(400, 48, controllerText, c_white, c_black);
    
    draw_set_color(c_black);
}

scrDrawButtonInfo(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
