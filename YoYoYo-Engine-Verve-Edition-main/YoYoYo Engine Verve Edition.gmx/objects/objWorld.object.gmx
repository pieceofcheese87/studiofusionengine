<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make sure only 1 objWorld exists
//All other code you'd want to put here should go in the Game Start event for consistency.

if (instance_number(object_index) &gt; 1)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return to previous window position/size (after using display_reset)

if (!window_get_fullscreen())
{
    window_set_position(global.windowXPrev, global.windowYPrev);
    window_set_size(global.windowWidthPrev, global.windowHeightPrev);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause current music after fadeout ends

audio_pause_sound(global.currentMusic);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game checks - Pause, restart

global.count ++ //Oscillation timer

scrCheckAndSwitchController();

if (global.gameStarted)
{
    scrCheckAndPause();
    
    if (!global.gamePaused)
    {
        if (scrButtonCheckPressed(KEY.RESTART))
        {
            //Stop death sound/music
            audio_stop_sound(global.deathSound);
            audio_stop_sound(global.gameOverMusic);
            
            //Resume room music
            audio_resume_sound(global.currentMusic);
            
            //Return to old gain if music is being faded out
            if (global.musicFading)
            {
                global.musicFading = false;
                audio_sound_gain(global.currentMusic, global.currentGain,0);
                alarm[0] = -1;   //Reset alarm that pauses music
            }
            
            scrSaveGame(false);    //Save death/time
            scrLoadGame(false);    //Load the game
        }
        
        if ( (global.timeWhenDead || instance_exists(objPlayer)) &amp;&amp; !(!global.timeWhenCleared &amp;&amp; global.gameClear) )    //Increment timer
        {
            global.timeMicro += delta_time;
            global.time += global.timeMicro div 1000000;
            global.timeMicro = global.timeMicro mod 1000000;
        }
    }
    else    //Volume control
    {
        var inPauseOptions = instance_exists(objOptionsMenu) || instance_exists(objKeyboardControlsMenu) || instance_exists(objControllerMenu);

        if (!inPauseOptions)
        {        
            var vPressed = (scrButtonCheckPressed(KEY.UP) - scrButtonCheckPressed(KEY.DOWN));                
            var v = (scrButtonCheck(KEY.UP) - scrButtonCheck(KEY.DOWN));
            
            if (vPressed != 0)
            {
                global.volumeLevel += vPressed;
                volumeTimer = volumeDelay;
            }
            if (v != 0)
            {
                if (volumeTimer &lt;= 0)
                {
                    global.volumeLevel += v;
                }
                volumeTimer--;
            }
            
            global.volumeLevel = clamp(global.volumeLevel, 0, 100);
            audio_master_gain(global.volumeLevel / 100);
            
            if (scrButtonCheckPressed(KEY.MENU_OPTIONS))
            {
                instance_create(0, 0, objOptionsMenu);
            }
        }
    }
    
    scrSetRoomCaption();
}
else if (room == rDifficultySelect)    //Special case for restarting in difficulty select
{
    if (scrButtonCheckPressed(KEY.RESTART))
    {
        instance_destroy(objPlayer);
        room_restart();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug + update keys

if (global.debugMode &amp;&amp; global.gameStarted &amp;&amp; !global.gamePaused)
{
    if (keyboard_check(vk_tab))    //Teleport to mouse
    {
        with (objPlayer)
        {
            if (place_free(mouse_x, mouse_y))
            {
                x = mouse_x;
                y = mouse_y - vspeed;
            }
        }
    }
    
    if ((global.debugControl &amp;&amp; keyboard_check(vk_control)) || !global.debugControl)
    { 
        if (keyboard_check_pressed(vk_insert))    //Save game
        {
            with (objPlayer)
            {
                scrSaveGame(true);
                var snd = audio_play_sound(sndItem, 0, false);
                audio_sound_gain(snd, 0.5, 0);
            }
        }
        
        if (keyboard_check_pressed(vk_delete))    //Toggle showing the hitbox
        {
            global.debugShowHitbox = !global.debugShowHitbox;
        }
        
        if (keyboard_check_pressed(vk_home))    //Toggle god mode
        {
            global.debugNoDeath = !global.debugNoDeath;
        }
        
        if (keyboard_check_pressed(vk_end))    //Toggle infinite jump
        {
            global.debugInfJump = !global.debugInfJump;
        }
        
        if (keyboard_check(ord("G")))
        {
            room_speed = 500;
        }
        else { room_speed = 50; }
    }
    
    if (keyboard_check_pressed(vk_pageup) &amp;&amp; room != room_last)    //Go to next room
    {        
        instance_destroy(objPlayer);
        room_goto_next();
    }
    
    if (keyboard_check_pressed(vk_pagedown) &amp;&amp; room != room_first)    //Go to previous room
    {
        instance_destroy(objPlayer);
        room_goto_previous();
    }
}

if (!global.isUpToDate &amp;&amp; !global.gameStarted)
{
    if (keyboard_check_pressed(vk_tab))
    {
        url_open(global.newestVersionLink);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Function keys

if (keyboard_check_pressed(vk_escape))
{
    game_end();
}

if (keyboard_check_pressed(vk_f2))
{
    scrRestartGame();
    exit;
}

if (keyboard_check_pressed(vk_f4) &amp;&amp; !global.gamePaused) //Toggle fullscreen mode
{
    global.fullscreenMode = !global.fullscreenMode;
    window_set_fullscreen(global.fullscreenMode);
    scrSaveConfig();
}

if (keyboard_check_pressed(vk_f5) &amp;&amp; !global.gamePaused) //Reset window size
{
    scrResetWindowSize();
}

if (keyboard_check_pressed(vk_backspace) &amp;&amp; !global.gamePaused)    //Toggle debug overlay
{
    global.debugOverlay = !global.debugOverlay;
}

if (keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord("M")) &amp;&amp; !global.gamePaused) //Toggle mute music setting
{
    scrToggleMusic();
    scrSaveConfig();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var Id = async_load[? "id"];
var status = async_load[? "status"];
var result = async_load[? "result"];

if (Id == global.httpUpdateCheck)
{                 
    if (status == 0)
    {                        
        var map = json_decode(result);
        if (map != -1)
        {
            global.newestVersionNumber = map[? "game-version"];
            global.newestVersionLink = map[? "download-link"];
            if (!is_undefined(global.newestVersionNumber) &amp;&amp; !is_undefined(global.newestVersionLink))
            {
                global.isUpToDate = (global.gameVersion == global.newestVersionNumber);
                updateString = scrFormat("Current version {global.gameVersion} is outdated! {global.newestVersionNumber} is available.#Press Tab to open the download link");
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade current music out
global.musicFading = true;
global.currentGain = audio_sound_get_gain(global.currentMusic);
audio_sound_gain(global.currentMusic, 0, 1000);    //Fade out music over 1 second

alarm[0] = 50;  //Pause music when it's done fading
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set music, framerate, and window caption

if (!instance_exists(objPlayMusic))
{
    scrGetMusic();
}

room_speed = 50;
scrSetRoomCaption();

//Set dotkid and vvv kid to false on room start
global.dotkid = false
global.playerV = false
with objPlayer { scrSetPlayerMask() }

//Set global.count to 0 to reset oscillation cycles
global.count = 0

//Jungle adventure vines
global.vineToggle = 0

//Walk the ceiling - remove invert controls if not upside down
if global.grav == 1 {
    global.invertControls = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize everything

scrInitializeGlobals();
scrLoadConfig();

if (global.checkForUpdates)
{
    global.httpUpdateCheck = http_get(global.versionDataUrl);
    updateString = "";
}

volumeTimer = 0;
volumeDelay = 10;

room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Smoothing mode fix
//Draw the final application surface at the desired smoothing.
texture_set_interpolation(global.smoothingMode);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Smoothing mode fix
//Turn off smoothing so stretched sprites don't distort.
texture_set_interpolation(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw update + debug overlay

draw_set_color(c_black);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(fDefault12);

if (!global.gameStarted)
{
    if (!global.isUpToDate)
    {
        scrDrawTextOutline(34, 34, updateString, c_white, c_black);
    }
}
else if (global.debugOverlay)
{
    var drawX = 0, drawH = 0, drawY = 0, drawV = 0;
    var drawAlign = 0, drawAlignReal = 0, drawAngle = 0;
    var drawnJ = 0, drawdJ = 0, xOff = 20;
    
    if (instance_exists(objPlayer))
    {   
        drawX = objPlayer.x;
        drawH = objPlayer.hspeed;
        drawY = objPlayer.y;
        drawV = objPlayer.vspeed;
        drawnJ = objPlayer.numJumps;
        
        if (!global.infJump &amp;&amp; !global.debugInfJump)
            drawdJ = objPlayer.djump;
        else
            drawdJ = "∞";
        
        drawAlign = objPlayer.x mod 3;
        drawAlignReal = objPlayer.x mod objPlayer.runSpeed;
        
        drawAngle = objPlayer.image_angle;
    }

    scrDrawTextOutline(xOff,20,"FPS: "+string(fps)+" (R: "+string(fps_real)+")",c_white,c_black);
    if (!global.gamePaused)
    {
        scrDrawTextOutline(xOff,40,"X: "+string(drawX)+" (h: "+string(drawH)+")",c_white,c_black);
        scrDrawTextOutline(xOff,60,"Y: "+string(drawY)+" (v: "+string(drawV)+")",c_white,c_black);
        scrDrawTextOutline(xOff,80,"Align: "+string(drawAlign)+" (e: "+string(drawAlignReal)+")",c_white,c_black);
        scrDrawTextOutline(xOff,100,"Angle: "+string(drawAngle)+"º",c_white,c_black);
        if (global.debugMode)
        {
            scrDrawTextOutline(xOff,120+(global.debugMode*20),"Room: "+room_get_name(room)+" (No."+string(room)+")",c_white,c_black);
            //scrDrawTextOutline(xOff,160,"God Mode: "+string(global.debugNoDeath),c_white,c_black);
            //scrDrawTextOutline(xOff,120+(global.debugMode*40),"Infinite Jump: "+string(global.debugInfJump),c_white,c_black);
            scrDrawTextOutline(xOff,120+(global.debugMode*40),"Jumps: "+string(drawnJ)+" (Dj: "+string(drawdJ)+")",c_white,c_black);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw pause screen

if (global.gamePaused)
{
    draw_clear(c_black);
    
    if (surface_exists(global.pauseSurf))       //Check if surface exists before drawing it
    {
        draw_surface(global.pauseSurf,0,0);
    }
    
    draw_set_color(c_black);
    draw_set_alpha(0.5);
    
    draw_rectangle(-1, -1, display_get_gui_width(), display_get_gui_height(), 0);    //Darken the paused screen
    
    draw_set_alpha(1);
    
    var inPauseOptions = instance_exists(objOptionsMenu) || instance_exists(objKeyboardControlsMenu) || instance_exists(objControllerMenu);
    
    if (!inPauseOptions)
    {
        draw_set_color(c_white);
        draw_set_halign(fa_center);
        draw_set_valign(fa_top);
        draw_set_font(fDefault30);
        
        draw_text(display_get_gui_width()/2, display_get_gui_height()/2 - 24, "PAUSE");
        
        draw_set_halign(fa_left);
        draw_set_font(fDefault18);
        
        var t = global.time;
        var timeText = string(t div 3600) + ":";
        t = t mod 3600;
        timeText += string(t div 600);
        t = t mod 600;
        timeText += string(t div 60) + ":";
        t = t mod 60;
        timeText += string(t div 10);
        t = t mod 10;
        timeText += string(floor(t));
        
        draw_text(20, 516, "Volume: " + string(global.volumeLevel) + "%");
        draw_text(20, 541, "Deaths: " + string(global.death));
        draw_text(20, 566, "Time: " + timeText);
        
        draw_set_font(fDefault12);
        draw_set_halign(fa_middle);
        if (!global.controllerMode)
        {
            var optionsButton = scrGetKeybind(global.menuOptionsButton[0]);
        }
        else
        {
            var optionsButton = scrGetControllerBind(global.menuOptionsButton[1]);
        }
        draw_text(400, 556, "["+optionsButton+"] Options");
    }
    else
    {
        with(objOptionsMenu)
        {
            event_perform(ev_draw, 0);
        }
        with(objKeyboardControlsMenu)
        {
            event_perform(ev_draw, 0);
        }
        with(objControllerMenu)
        {
            event_perform(ev_draw, 0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
