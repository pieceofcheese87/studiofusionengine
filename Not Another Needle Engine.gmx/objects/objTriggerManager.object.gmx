<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set in creation code
trg = 0;
spd = 0; //used for most movement options
triggerOnce = true;
delay = 0;

//Internal
global.makingTrigger = false;
doTriggers = ds_list_create();
for (var i = 0; i &lt; ds_list_size(global.triggers); i++)
{
    var script = global.triggers[| i];
    script_execute(script, "define");
}

delaystart = 0;
_hspeed = 0;
_vspeed = 0;
_gravity = 0;
_gravity_direction = 0;
_speed = 0;
_direction = 0;

hasExclusive = false;
init = false;
inst = -1;
triggered = false;
doTriggersSize = 0;
abort = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup

ds_list_destroy(doTriggers);
abort = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hspeed = _hspeed;
vspeed = _vspeed;
gravity = _gravity;
gravity_direction = _gravity_direction;


if (!instance_exists(inst))
{
    //Destroy self if triggered instance no longer exists for any reason.
    instance_destroy();
    exit;
}

if (!init)
{
    //Initialize internal variables on the first frame.
    event_user(0);
    init = true;
}

if (!triggered &amp;&amp; global.trigger[? trg])
{
    //Just got activated - start delay.
    triggered = true;
    delaystart = delay;
}

if (triggered &amp;&amp; delay &gt;= 0)
{
    if (delay == 0)
    {
        //Delay ended - start moving.
        event_user(2);
    }
    delay--;
}

if (triggered &amp;&amp; delay == -1)
{
    //Already activated, update movement.
    event_user(3);
}

motion_add(gravity_direction, gravity);
x += hspeed;
y += vspeed;  

_hspeed = hspeed;
_vspeed = vspeed;
_gravity = gravity;
_gravity_direction = gravity_direction;

hspeed = 0;
vspeed = 0;
gravity = 0;
gravity_direction = 0;

event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Trigger step

global.makingTrigger = false;
for (var i = 0; i &lt; doTriggersSize; i++)
{
    if (!abort)
    {
        var script = doTriggers[| i];
        script_execute(script, "step");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Trigger first frame

with (inst._currentTrigger)
{
    //Reset or destroy the trigger previously controlling the instance
    other.x = x;
    other.y = y;
    if (!triggerOnce)
    {
        triggered = false;
        global.trigger[? trg] = false;
        
        movetoT = 0;
        fadeT = 0;
        scaleT = 0;
        delay = delaystart;
    }
    else
    {
        instance_destroy();
    }
}
inst._currentTrigger = id;

global.makingTrigger = false;
for (var i = 0; i &lt; doTriggersSize; i++)
{    
    var script = doTriggers[| i];
    script_execute(script, "init");
}

triggered = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move affected instance

if (!instance_exists(inst))
{
    instance_destroy();
    exit;
}

if !(triggered &amp;&amp; delay == -1) //Follow assigned instance until the trigger is active
{
    x = inst.x;
    y = inst.y;
    
    if (scrUsesTrigger(trgStretch))
    {
        image_xscale = inst.image_xscale;
        image_yscale = inst.image_yscale;
    }
    
    if (scrUsesTrigger(trgRotate))
    {
        image_angle = inst.image_angle;
    }
}
else //Move assigned instance to own position
{
    if (hasExclusive)
    {
        inst.hspeed = x - inst.x;
        inst.vspeed = y - inst.y;
    }
    
    if (scrUsesTrigger(trgFade))
    {
        inst.image_alpha = image_alpha;
        if (fadeType == "in")
        {
            inst.mask_index = mask_index;
        }
    }
    
    if (scrUsesTrigger(trgStretch))
    {
        if (!is_undefined(xscale))
        {
            inst.image_xscale = image_xscale;
        }
        if (!is_undefined(yscale))
        {
            inst.image_yscale = image_yscale;
        }
    }
    
    if (scrUsesTrigger(trgRotate))
    {
        inst.image_angle = image_angle;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init

global.trigger[? trg] = !!global.trigger[? trg];
global.makingTrigger = false;

for (var i = 0; i &lt; ds_list_size(global.triggers); i++)
{
    var script = global.triggers[| i];
    if (script_execute(script, "exclusive"))
    {
        if (!hasExclusive &amp;&amp; script_execute(script, "isUsed"))
        {
            hasExclusive = true;
            ds_list_add(doTriggers, script);
        }
    }
    else if (script_execute(script, "isUsed"))
    {
        ds_list_add(doTriggers, script);
    }
}

doTriggersSize = ds_list_size(doTriggers);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
