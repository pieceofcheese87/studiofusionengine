<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>select = 0;

xMargin = 120;
yStep = 40;

settingKey = false;
showResetPrompt = false;

//Add one for the "Reset controls" line
numberOfKeys = KEY.NUMBER + 1;

buttonName = scrControls("getKeyboardNameArray");
event_user(0);

//Make Reset controls the last option
buttonName[numberOfKeys - 1] = "Reset Controls";
bindName[numberOfKeys - 1] = "";

animationTime = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop reset prompt
showResetPrompt = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>animationTime++;             
                           
if (!settingKey)
{
    //Not currently rebinding a key, navigate options
    if (scrButtonCheckPressed(KEY.MENU_BACK))
    {
        //Save changes and go back
        scrSaveConfig();
        instance_create(x, y, objOptionsMenu);
        instance_destroy();
    }
    
    if (scrButtonCheckPressed(KEY.MENU_OPTIONS))
    {
        //Save changes and go back
        scrSaveConfig();
        global.menuSelectPrev[1] = 0;
        if (!global.gameStarted)
        {
            room_goto(rMenu);
        }
        else
        {
            instance_destroy();
        }
        exit;
    }
                                      
    var vInputPressed = scrButtonCheckPressed(KEY.MENU_DOWN) - scrButtonCheckPressed(KEY.MENU_UP);
    if (vInputPressed != 0)
    {
        //Move to next/previous option
        audio_play_sound(global.menuSound, 0, false);    
        select += vInputPressed;
        select = scrWrapInRange(select, 0, numberOfKeys - 1)
    }
                               
    if (scrButtonCheckPressed(KEY.MENU_ACCEPT))
    {
        //Select current option  
        if (select != numberOfKeys - 1)
        {
            //Start rebinding
            settingKey = true;
        }
        else
        {
            //Reset controls
            scrControls("setKeyboardDefault");
            
            showResetPrompt = true;
            alarm[0] = 60;
        }
    }
}
else
{
    //Wait for new keybind
    if (keyboard_check_pressed(vk_anykey))
    {
        //Bind new key
        var newKey = keyboard_key;
        
        if (newKey == 160 || newKey == 161)
        {
            //If a shift key was pressed, make both shift keys work
            newKey = vk_shift;
        }
        
        global.controls[select, 0] = newKey;
        settingKey = false;
    }
    else if (scrAnyControllerButton() != -1)
    {
        settingKey = false;
    }
}

//Get current controls
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update current binds

for (var i = 0; i &lt; numberOfKeys - 1; i++)
{
    bindName[i] = scrGetKeybind(global.controls[i, 0]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_valign(fa_top);
draw_set_color(scrTernary(!global.gameStarted, c_black, c_white));
draw_set_font(fDefault24);

yStart = (608 - numberOfKeys * yStep) / 2;

currentSlot = 0;
for(var i = 0; i &lt; numberOfKeys; i++)
{
    var bindText = bindName[i];
    if (i == select &amp;&amp; settingKey)
    {
        bindText = "Press the key to set";
    }
    else if (showResetPrompt &amp;&amp; i == numberOfKeys - 1)
    {
        bindText = "Controls reset!";
    }
    scrDrawOption(buttonName[i], bindText);
    
    draw_sprite(sprPlayerIdle, animationTime/5, xMargin - 16, yStart + (yStep * select) + 21);
}

scrDrawButtonInfo(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
